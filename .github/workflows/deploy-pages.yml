name: Deploy to GitHub Pages

on:
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      publish_dir: ${{ steps.find_dir.outputs.publish_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Prepare site output
        shell: bash
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          elif [ -f package.json ]; then
            npm install
          fi

          if npm run | grep -q "build"; then
            npm run build
          fi

          if [ ! -d build ] && [ ! -d dist ] && [ ! -d public ]; then
            mkdir -p public
            cat > public/index.html <<'HTML'
            <!doctype html>
            <html>
              <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width,initial-scale=1">
                <title>Empty GitHub Pages site</title>
              </head>
              <body>
                <h1>This site was deployed from GitHub Actions</h1>
                <p>No build artifact was found; the workflow generated this placeholder page.</p>
              </body>
            </html>
          HTML
          fi

      - name: Determine publish directory
        id: find_dir
        run: |
          if [ -d build ]; then
            echo "publish_dir=build" >> $GITHUB_OUTPUT
          elif [ -d dist ]; then
            echo "publish_dir=dist" >> $GITHUB_OUTPUT
          elif [ -d public ]; then
            echo "publish_dir=public" >> $GITHUB_OUTPUT
          else
            echo "publish_dir=public" >> $GITHUB_OUTPUT
          fi

      - name: Upload placeholder (no-op)
        run: echo "Build finished; publish_dir=${{ steps.find_dir.outputs.publish_dir }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to gh-pages via action
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: ${{ needs.build.outputs.publish_dir }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  smoke-check:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Pages to be available
        run: |
          set -euo pipefail
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          URL="https://${OWNER}.github.io/${REPO}/"
          echo "Smoke checking site: $URL"
          for i in {1..12}; do
            HTTP_CODE=$(curl -fsS -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$HTTP_CODE" = "200" ]; then
              break
            fi
            sleep 5
          done
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Site did not return 200 (got $HTTP_CODE)"
            exit 1
          fi

      - name: Smoke assertions
        run: |
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          URL="https://${OWNER}.github.io/${REPO}/"
          curl -fsS "$URL" | grep -q '<div id="root"' || (echo 'Root div not found in HTML' && exit 1)

  rollback:
    needs: smoke-check
    runs-on: ubuntu-latest
    if: ${{ needs.smoke-check.result == 'failure' }}
    steps:
      - name: Checkout (fetch all)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore gh-pages from gh-pages-backup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          # Fetch the backup branch from origin
          git fetch origin gh-pages-backup:refs/remotes/origin/gh-pages-backup
          # Force-update remote gh-pages with backup
          git push origin origin/gh-pages-backup:gh-pages --force
          echo "Rollback: origin/gh-pages has been restored from origin/gh-pages-backup"
