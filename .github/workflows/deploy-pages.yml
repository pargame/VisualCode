name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Prepare site output
        shell: bash
        run: |
          # If this repo has a lockfile, prefer reproducible installs; otherwise if package.json exists, install
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          elif [ -f package.json ]; then
            # No lockfile but package.json exists â€” do a best-effort install so build can run
            npm install
          fi

          # Run build if a build script is available (works for many frameworks, including Vite)
          if npm run | grep -q "build"; then
            npm run build
          fi

          # Ensure there is at least one static page to deploy if no build output
          if [ ! -d build ] && [ ! -d dist ] && [ ! -d public ]; then
            mkdir -p public
            cat > public/index.html <<'HTML'
            <!doctype html>
            <html>
              <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width,initial-scale=1">
                <title>Empty GitHub Pages site</title>
              </head>
              <body>
                <h1>This site was deployed from GitHub Actions</h1>
                <p>No build artifact was found; the workflow generated this placeholder page.</p>
              </body>
            </html>
          HTML
          fi

      - name: Determine publish directory
        id: find_dir
        run: |
          if [ -d build ]; then
            echo "publish_dir=build" >> $GITHUB_OUTPUT
          elif [ -d dist ]; then
            echo "publish_dir=dist" >> $GITHUB_OUTPUT
          elif [ -d public ]; then
            echo "publish_dir=public" >> $GITHUB_OUTPUT
          else
            echo "publish_dir=public" >> $GITHUB_OUTPUT
          fi

      - name: Archive Pages artifact (Linux/macOS/Windows)
        shell: bash
        run: |
          set -e
          ART_DIR=${{ steps.find_dir.outputs.publish_dir }}
          TAR_NAME="$RUNNER_TEMP/artifact.tar"
          if [ "${{ runner.os }}" = "Windows" ]; then
            tar -cvf "$TAR_NAME" -C "$ART_DIR" .
          else
            tar --dereference --hard-dereference -cvf "$TAR_NAME" -C "$ART_DIR" --exclude=.git --exclude=.github .
          fi

      - name: Upload artifact with upload-artifact@v4
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: ${{ runner.temp }}/artifact.tar
          retention-days: 1

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Smoke check deployed site
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          URL="https://${OWNER}.github.io/${REPO}/"
          echo "Smoke checking site: $URL"
          # Check HTTP 200
          HTTP_CODE=$(curl -fsS -o /dev/null -w "%{http_code}" "$URL" || true)
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Site did not return 200 (got $HTTP_CODE)"
            exit 1
          fi
          # Check root node
          if ! curl -fsS "$URL" | grep -q '<div id="root"'; then
            echo "Root div not found in HTML"
            exit 1
          fi
          echo "Smoke checks passed"
