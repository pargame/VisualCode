name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      publish_dir: ${{ steps.find_dir.outputs.publish_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Restore Vite cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vite
            node_modules/.cache/vite
          key: ${{ runner.os }}-vite-${{ hashFiles('**/package-lock.json') }}

      - name: Prepare site output
        shell: bash
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          elif [ -f package.json ]; then
            npm install
          fi
          # Run the production build here so the build job can determine the correct publish_dir
          if npm run | grep -q "build"; then
            npm run build
          fi

      - name: Auto format & lint-fix for PRs (commits back when allowed)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run formatter and eslint --fix (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # install deps (match earlier logic)
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          elif [ -f package.json ]; then
            npm install
          fi

          # run prettier then eslint autofix
          if command -v npx >/dev/null 2>&1; then
            npx prettier --check . || npx prettier --write . || true
            # Lint only source files to avoid scanning built artifacts in dist/ or build/
            npx eslint "src/**/*.{js,jsx,ts,tsx}" --fix || true
          fi

          # commit back to the PR branch when changes exist and repo is same
          if [ -n "$(git status --porcelain)" ]; then
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config user.name "github-actions[bot]"
            git add -A
            git commit -m "chore: auto-format & lint fixes [ci skip]" || echo "No commit needed"
            # push will use the default GITHUB_TOKEN authenticated checkout
            git push || echo "Push failed (likely a fork or protected branch)"
          else
            echo "No formatting/lint changes"
          fi

          if npm run | grep -q "build"; then
            npm run build
          fi

          if [ ! -d build ] && [ ! -d dist ] && [ ! -d public ]; then
            mkdir -p public
            printf "%b" "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Empty GitHub Pages site</title>\n  </head>\n  <body>\n    <h1>This site was deployed from GitHub Actions</h1>\n    <p>No build artifact was found; the workflow generated this placeholder page.</p>\n  </body>\n</html>" > public/index.html
          fi

      - name: Determine publish directory
        id: find_dir
        run: |
          if [ -d build ]; then
            echo "publish_dir=build" >> $GITHUB_OUTPUT
          elif [ -d dist ]; then
            echo "publish_dir=dist" >> $GITHUB_OUTPUT
          elif [ -d public ]; then
            echo "publish_dir=public" >> $GITHUB_OUTPUT
          else
            echo "publish_dir=public" >> $GITHUB_OUTPUT
          fi

      - name: Normalize site structure for Pages
        shell: bash
        run: |
          set -euo pipefail
          PUBLISH_DIR="${{ steps.find_dir.outputs.publish_dir }}"
          REPO_NAME="${{ github.event.repository.name }}"
          echo "Normalizing publish dir ($PUBLISH_DIR) into site/$REPO_NAME"
          mkdir -p site
          if [ -d "$PUBLISH_DIR" ]; then
            mkdir -p "site/$REPO_NAME"
            # copy contents preserving structure
            cp -a "$PUBLISH_DIR/." "site/$REPO_NAME/"
            # copy index.html to site root so validation can find it
            if [ -f "$PUBLISH_DIR/index.html" ]; then
              cp "$PUBLISH_DIR/index.html" site/index.html
              # Also create an index-latest variant to help clients fetch a network-first HTML
              # This file will contain a build marker and normalized cache-bust query for assets.
              cp "$PUBLISH_DIR/index.html" site/index-latest.html || true
              # If a service worker exists in the publish dir, also expose it at the site root so clients can unregister properly
              if [ -f "$PUBLISH_DIR/sw.js" ]; then
                echo "Copying service worker to site root: sw.js"
                cp "$PUBLISH_DIR/sw.js" site/sw.js || true
              fi
              # inject build meta if not present, and normalize asset query to ?v=latest (best-effort)
              perl -0777 -pe "unless (m{<meta[^>]+name=['\"]build['\"]}i) { s{(<head[^>]*>)}{\$1\n    <meta name=\"build\" content=\"latest\">}i }" -i site/index-latest.html || true
              perl -0777 -pe "s{(\b/assets/[^\"\\s>]+)(\?v=[^\"\\s>]*)}{\$1?v=latest}gi" -i site/index-latest.html || true
            fi
          else
            echo "Warning: publish dir '$PUBLISH_DIR' not found; creating placeholder site/$REPO_NAME"
            mkdir -p "site/$REPO_NAME"
            printf '%s' "<!doctype html><html><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><title>Empty site</title></head><body><h1>Empty site</h1></body></html>" > "site/$REPO_NAME/index.html"
          fi

      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site

      - name: Upload placeholder (no-op)
        run: echo "Build finished; publish_dir=${{ steps.find_dir.outputs.publish_dir }}"

  deploy:
    if: ${{ github.event_name == 'push' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: site
          path: site

      - name: Debug site contents
        run: |
          echo "Downloaded artifact contents:";
          ls -la site || true;
          du -sh site || true

      - name: Prepare deploy site and decide if deploy is necessary
        id: deploy_prepare
        run: |
          set -euo pipefail
          # ensure we have site directory from artifact
          if [ -d site ]; then
            echo "publish_dir=site" >> $GITHUB_OUTPUT
          else
            mkdir -p site
            printf "%b" "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Empty GitHub Pages site</title>\n  </head>\n  <body>\n    <h1>This site was deployed from GitHub Actions</h1>\n    <p>No build artifact was found; the workflow generated this placeholder page.</p>\n  </body>\n</html>" > site/index.html
            echo "publish_dir=site" >> $GITHUB_OUTPUT
          fi

          # compute checksum of new site
          NEW_SUM=$(find site -type f -exec sha256sum {} \; | sort | sha256sum | awk '{print $1}') || NEW_SUM=""
          echo "NEW_SUM=$NEW_SUM"

          # fetch gh-pages branch (if exists) to compare
          git fetch origin gh-pages || true
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            mkdir -p /tmp/old_site
            git --work-tree=/tmp/old_site checkout origin/gh-pages -- . || true
            OLD_SUM=$(find /tmp/old_site -type f -exec sha256sum {} \; | sort | sha256sum | awk '{print $1}') || OLD_SUM=""
          else
            OLD_SUM=""
          fi
          echo "OLD_SUM=$OLD_SUM"

          # print per-file checksums for debugging
          echo "New site file checksums:"
          find site -type f -exec sha256sum {} \; | sort || true
          if [ -d /tmp/old_site ]; then
            echo "Old site file checksums:"
            find /tmp/old_site -type f -exec sha256sum {} \; | sort || true
          fi

          if [ -n "$OLD_SUM" ] && [ "$NEW_SUM" = "$OLD_SUM" ]; then
            echo "No changes detected between build output and gh-pages; skipping deploy."
            exit 0
          fi

      - name: Validate site contents
        run: |
          set -euo pipefail
          # ensure index.html exists
          if [ ! -f site/index.html ]; then
            echo "ERROR: site/index.html not found" && exit 1
          fi
          # ensure assets referenced by index.html exist in the site folder
          ASSETS=$(grep -oE "/${{ github.event.repository.name }}/assets/[^\"'\s>]+" site/index.html | tr -d '\r' | sed 's#^/##' | sort -u || true)
          if [ -n "$ASSETS" ]; then
            echo "Validating referenced assets:" && echo "$ASSETS"
            MISSING=0
            for a in $ASSETS; do
              # normalize candidates
              SHORT_PATH="${a#*/}"          # path without leading repo/ prefix
              CAND1="site/$a"               # site/VisualCode/assets/...
              CAND2="site/$SHORT_PATH"      # site/assets/...
              GLOB1=(site/${a}*)              # wildcard match (handles truncated suffix)
              GLOB2=(site/${SHORT_PATH}*)     # wildcard without repo prefix
              echo "Checking: $CAND1 or $CAND2 or globs ${GLOB1[*]} ${GLOB2[*]}"
              if [ -f "$CAND1" ] || [ -f "$CAND2" ] || compgen -G "${GLOB1[*]}" >/dev/null || compgen -G "${GLOB2[*]}" >/dev/null; then
                echo "FOUND: $a"
                continue
              else
                echo "MISSING: $a (looked at $CAND1, $CAND2, and globs)" && MISSING=1
              fi
            done
            if [ "$MISSING" -ne 0 ]; then
              echo "ERROR: referenced assets missing from site/ — aborting deploy" && exit 1
            fi
          else
            echo "No repo-scoped assets referenced in index.html; continuing"
          fi

      - name: Deploy to gh-pages via action
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: site
          clean: true
          force: true
          commit-message: "chore: deploy site via CI (${GITHUB_SHA})"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Pages build and poll for completion
        id: pages_build
        run: |
          set -euo pipefail
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          API="https://api.github.com/repos/${OWNER}/${REPO}"
          echo "Triggering Pages build via API"
          rsp=$(curl -sS -X POST -H "Authorization: token ${TOKEN}" -H "Accept: application/vnd.github+json" "${API}/pages/builds") || true
          BUILD_ID=$(echo "$rsp" | python3 -c "import sys,json; j=json.load(sys.stdin); print(j.get('id',''))") || BUILD_ID=""
          echo "Triggered build id: $BUILD_ID"
          # Poll latest build status until 'built' or 'failed'
          for i in {1..24}; do
            sleep 5
            s=$(curl -sS -H "Authorization: token ${TOKEN}" -H "Accept: application/vnd.github+json" "${API}/pages/builds/latest" || true)
            status=$(echo "$s" | python3 -c "import sys,json; j=json.load(sys.stdin); print(j.get('status','') if isinstance(j,dict) else '')") || status=""
            echo "Pages build status: $status"
            if [ "$status" = "built" ]; then
              echo "pages_built=true" >> $GITHUB_OUTPUT
              break
            fi
            if [ "$status" = "failed" ]; then
              echo "pages_built=false" >> $GITHUB_OUTPUT
              echo "Pages build failed" >&2
              exit 1
            fi
          done
          if [ -z "${status:-}" ] || [ "${status}" != "built" ]; then
            echo "Pages build did not reach 'built' state in time" >&2
            echo "pages_built=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Verify index-latest is served (no-cache) and refresh if stale
        id: verify_latest
        run: |
          set -euo pipefail
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          URL="https://${OWNER}.github.io/${REPO}/index-latest.html"
          echo "Verifying $URL"
          HTTP=$(curl -fsS -o /dev/null -w "%{http_code}" -H 'Cache-Control: no-cache' "$URL" || true)
          echo "index-latest returned $HTTP"
          if [ "$HTTP" = "200" ]; then
            echo "latest_ok=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "index-latest not yet available (status $HTTP). Attempting forced refresh commit to gh-pages to nudge CDN..."

          # Attempt up to 2 refresh commits that update index-latest.html timestamp
          for attempt in 1 2; do
            echo "Refresh attempt $attempt"
            tmpdir=$(mktemp -d)
            git clone --depth 1 --branch gh-pages "https://x-access-token:${TOKEN}@github.com/${OWNER}/${REPO}.git" "$tmpdir" || true
            if [ -f site/index-latest.html ]; then
              cp -f site/index-latest.html "$tmpdir/index-latest.html"
            else
              echo "No site/index-latest.html artifact available to refresh" >&2
              break
            fi
            if [ -f "$tmpdir/index-latest.html" ]; then
              ts=$(date -u +%Y%m%d%H%M%S)
              note="<!-- refreshed: $ts -->"
              if ! grep -qF "$note" "$tmpdir/index-latest.html"; then
                printf "\n%s\n" "$note" >> "$tmpdir/index-latest.html"
              fi
            fi
            cd "$tmpdir"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config user.name "github-actions[bot]"
            git add index-latest.html || true
            if git diff --staged --quiet; then
              echo "No change to index-latest; skipping commit"
            else
              git commit -m "chore: refresh index-latest to force CDN update" || true
              git push origin HEAD:gh-pages --force || echo "push failed"
            fi
            rm -rf "$tmpdir"

            # trigger Pages build again
            curl -sS -X POST -H "Authorization: token ${TOKEN}" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${OWNER}/${REPO}/pages/builds" || true
            # wait briefly before checking
            sleep 6
            NEWHTTP=$(curl -fsS -o /dev/null -w "%{http_code}" -H 'Cache-Control: no-cache' "$URL" || true)
            echo "Post-refresh index-latest status: $NEWHTTP"
            if [ "$NEWHTTP" = "200" ]; then
              echo "latest_ok=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "Failed to get index-latest to 200 after refresh attempts" >&2
          echo "latest_ok=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Pick issue token (prefer DEPLOY_ISSUE_TOKEN when present)
        id: pick_token
        env:
          DEPLOY_ISSUE_TOKEN: ${{ secrets.DEPLOY_ISSUE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if [ -n "$DEPLOY_ISSUE_TOKEN" ]; then
            echo "token=$DEPLOY_ISSUE_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "token=$GITHUB_TOKEN" >> $GITHUB_OUTPUT
          fi

      - name: Create issue on deploy failure
        if: failure()
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          title: 'Deploy to Pages failed for commit ${{ github.sha }}'
          body: |
            The deploy job failed for commit `${{ github.sha }}` on branch `${{ github.ref_name }}`.
            Please review the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Logs and immediate next steps are available in the Actions tab.
          labels: deploy, automated

  smoke-check:
    if: ${{ github.event_name == 'push' }}
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Pages to be available
        run: |
          set -euo pipefail
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          URL="https://${OWNER}.github.io/${REPO}/"
          echo "Smoke checking site: $URL"
          for i in {1..12}; do
            HTTP_CODE=$(curl -fsS -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$HTTP_CODE" = "200" ]; then
              break
            fi
            sleep 5
          done
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Site did not return 200 (got $HTTP_CODE)"
            exit 1
          fi

      - name: Smoke assertions
        run: |
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          URL="https://${OWNER}.github.io/${REPO}/"

          # Check root HTML contains expected app mount
          echo "Fetching $URL"
          curl -fsS "$URL" -o /tmp/pages_root.html || (echo 'Failed to fetch site root' && exit 1)
          grep -q '<div id="root"' /tmp/pages_root.html || (echo 'Root div not found in HTML' && exit 1)

          # Extract asset references from the root HTML and verify each returns HTTP 200 (no-cache)
          ASSETS=$(grep -Eo '(href|src)="[^"]+"' /tmp/pages_root.html | sed -E 's/.*="([^"]+)"/\1/' | grep -E '/assets/|^assets/' | sort -u || true)
          if [ -n "$ASSETS" ]; then
            echo "Validating ${#ASSETS[@]} referenced assets..."
            for a in $ASSETS; do
              [ -z "$a" ] && continue
              if echo "$a" | grep -q '^http'; then
                url="$a"
              elif echo "$a" | grep -q '^/'; then
                url="https://${OWNER}.github.io${a}"
              else
                url="https://${OWNER}.github.io/${REPO}/${a}"
              fi
              echo "HEAD $url"
              HTTP_CODE=$(curl -fsS -o /dev/null -w "%{http_code}" -H 'Cache-Control: no-cache' "$url" || true)
              if [ "$HTTP_CODE" != "200" ]; then
                echo "ERROR: asset $url returned $HTTP_CODE" && exit 1
              else
                echo "OK: $url -> $HTTP_CODE"
              fi
            done
          else
            echo "No assets referenced in root HTML matching /assets/ or assets/"
          fi

  rollback:
    if: ${{ github.event_name == 'push' && needs.smoke-check.result == 'failure' }}
    needs: smoke-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (fetch all)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore gh-pages from gh-pages-backup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          # Fetch the backup branch from origin
          git fetch origin gh-pages-backup:refs/remotes/origin/gh-pages-backup
          # Force-update remote gh-pages with backup
          git push origin origin/gh-pages-backup:gh-pages --force
          echo "Rollback: origin/gh-pages has been restored from origin/gh-pages-backup"

  verify-release-asset:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check for release asset via GitHub CLI
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install gh (GitHub CLI)
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh
          fi

      - name: Verify expected release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG=${{ github.ref_name }}
          OWNER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}
          echo "Verifying release assets for $TAG on $OWNER/$REPO"
          gh release view "$TAG" --repo "$OWNER/$REPO" --json assets -q '.assets[].name' || (echo "Release $TAG not found or no assets" && exit 1)
